<?xml version="1.0" encoding="UTF-8" standalone="no"?><templates><template autoinsert="true" context="org.python.pydev.editor.templates.python.modules" deleted="false" description="Plugin for DotNet " enabled="true" name="CAST DotNet Plugin">import cast.dotnet&#13;
&#13;
&#13;
class AllDotNetExtension(cast.dotnet.Extension):&#13;
    """&#13;
    An extension that prints all the event to log.&#13;
    """&#13;
    &#13;
    def start_analysis(self, options):&#13;
        cast.log.info('Starting analysis')&#13;
        &#13;
    def start_type(self, type_):&#13;
        """&#13;
        @type type_: cast.Type&#13;
        """&#13;
        cast.log.info('Starting type ' + str(type_))&#13;
   &#13;
    def start_member(self, member):&#13;
        """&#13;
        @type member: cast.Member&#13;
        """&#13;
        cast.log.info('  Starting member ' + str(member))&#13;
    &#13;
    def end_member(self, member):&#13;
        """&#13;
        @type member: cast.Member&#13;
        """&#13;
        cast.log.info('  Ending member ' + str(member))&#13;
        &#13;
    def end_type(self, type_):&#13;
        """&#13;
        @type type_: cast.Type&#13;
        """&#13;
        cast.log.info('Ending type ' + str(type_))&#13;
        &#13;
    def start_file(self, file):&#13;
        """&#13;
        @type file: cast.File&#13;
        """&#13;
        cast.log.info('Starting file ' + str(file))&#13;
    &#13;
    def end_file(self, file):&#13;
        """&#13;
        @type file: cast.File&#13;
        """&#13;
        cast.log.info('Ending file ' + str(file))&#13;
    &#13;
&#13;
class VisitPlugin(cast.Plugin):&#13;
    &#13;
    def __init__(self):&#13;
        cast.Plugin.__init__(self, 'Visit')&#13;
        self.register_extension(AllDotNetExtension())&#13;
</template><template autoinsert="true" context="org.python.pydev.editor.templates.python.modules" deleted="false" description="Sample plugin for DotNet" enabled="true" name="CAST Hello World DotNet Plugin">import cast.dotnet&#13;
&#13;
class MyExtension(cast.dotnet.Extension):&#13;
    &#13;
    def start_analysis(self, options):&#13;
        cast.log.info('Hello World!!')&#13;
   &#13;
                &#13;
class MyFirstPlugin(cast.Plugin):&#13;
    &#13;
    def __init__(self):&#13;
        cast.Plugin.__init__(self, 'My first plugin')&#13;
        self.register_extension(MyExtension())&#13;
</template><template autoinsert="true" context="org.python.pydev.editor.templates.python.modules" deleted="false" description="Plugin for JEE" enabled="true" name="CAST JEE Plugin">import cast.jee&#13;
&#13;
&#13;
class AllDotNetExtension(cast.jee.Extension):&#13;
    """&#13;
    An extension that prints all the event to log.&#13;
    """&#13;
    &#13;
    def start_analysis(self, options):&#13;
        cast.log.info('Starting analysis')&#13;
        &#13;
    def start_type(self, type_):&#13;
        """&#13;
        @type type_: cast.Type&#13;
        """&#13;
        cast.log.info('Starting type ' + str(type_))&#13;
   &#13;
    def start_member(self, member):&#13;
        """&#13;
        @type member: cast.Member&#13;
        """&#13;
        cast.log.info('  Starting member ' + str(member))&#13;
    &#13;
    def end_member(self, member):&#13;
        """&#13;
        @type member: cast.Member&#13;
        """&#13;
        cast.log.info('  Ending member ' + str(member))&#13;
        &#13;
    def end_type(self, type_):&#13;
        """&#13;
        @type type_: cast.Type&#13;
        """&#13;
        cast.log.info('Ending type ' + str(type_))&#13;
    &#13;
    def end_analysis(self):&#13;
        cast.log.info('Ending analysis')&#13;
        &#13;
&#13;
class VisitPlugin(cast.Plugin):&#13;
    &#13;
    def __init__(self):&#13;
        cast.Plugin.__init__(self, 'Visit')&#13;
        self.register_extension(AllJEEExtension())&#13;
</template></templates>