Overview
*********

CAST-SDK allow to develop plugins that are launched during the analysis process. It is a set of tools made to help producing more analysis data.

Some notable features :

* execute any executable during an analysis job, for example third party analyzers
* inject objects, links, property or rule violations into the analysis service
* handle new frameworks
* parse any type of files 
* do whatever one can program

It is based on 

* `Python 3.4 <http://www.python.org/doc/>`_ as scripting language 
* eclipse as IDE

The IDE features :

* unit test for the writen plugins
* debuggability of the plugins


What is a Plugin ?
==================

A plugin is a folder that can contain :

* python code that will be executed during the analysis
* additional metamodel to represent new types of objects, new properties
* quality rule definitions that will be added to the quality rule model

Once deployed it will be activated during the analysis and its code will be called at some predefined extension points.

The general idea behind those extension points is that plugins are called back at some key points of the analysis, and they are given the chance to do something at those points.

Plugins' extensions are called :

* at the very beginning 
* for each class, member in a descending tree walk
* for each analyzed file
* ...

.. figure::  extension_points_sequence.png
   :align:   center

   Extension point sequence example.

Those extention points may differ between technologies/analyzers but the mere principle will remain the same.

Those extension points generally have a context parameter. For example when starting the analysis of a file, the extension poitn receive the :class:`cast.analysers.File` object.

Plugin activation
-----------------

Correct plugins that reside in the plugin root folder are automatically activated for any analysis. 

No need for configuration. The general idea is that plugin have the opportunity to detect if their presence is required. It can typically be done by scanning analysis options.

Anatomy of a plugin
-------------------

The main entry point for a plugin is a Python class that inherits from ``cast.analysers.Plugin``. 

Analyzer scans each plugin directory and search for a python file (``*.py``) containing such a class. 

When found, the constructor of that plugin class is called.

The plugin folder can also contain metamodel files. 

Those files must be named : ``XXXMetaModel.xml`` and put under a subfolder ``configuration\<my language>\xxxMetaModel.xml``.


